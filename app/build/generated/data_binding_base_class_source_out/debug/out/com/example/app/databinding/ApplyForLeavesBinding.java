// Generated by view binder compiler. Do not edit!
package com.example.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ApplyForLeavesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout appForLeaves;

  @NonNull
  public final Button applyForLeavesbtn;

  @NonNull
  public final TextView textView16;

  @NonNull
  public final TextView textView22;

  @NonNull
  public final TextView textView23;

  private ApplyForLeavesBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout appForLeaves, @NonNull Button applyForLeavesbtn,
      @NonNull TextView textView16, @NonNull TextView textView22, @NonNull TextView textView23) {
    this.rootView = rootView;
    this.appForLeaves = appForLeaves;
    this.applyForLeavesbtn = applyForLeavesbtn;
    this.textView16 = textView16;
    this.textView22 = textView22;
    this.textView23 = textView23;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ApplyForLeavesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ApplyForLeavesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.apply_for_leaves, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ApplyForLeavesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout appForLeaves = (ConstraintLayout) rootView;

      id = R.id.apply_for_leavesbtn;
      Button applyForLeavesbtn = rootView.findViewById(id);
      if (applyForLeavesbtn == null) {
        break missingId;
      }

      id = R.id.textView16;
      TextView textView16 = rootView.findViewById(id);
      if (textView16 == null) {
        break missingId;
      }

      id = R.id.textView22;
      TextView textView22 = rootView.findViewById(id);
      if (textView22 == null) {
        break missingId;
      }

      id = R.id.textView23;
      TextView textView23 = rootView.findViewById(id);
      if (textView23 == null) {
        break missingId;
      }

      return new ApplyForLeavesBinding((ConstraintLayout) rootView, appForLeaves, applyForLeavesbtn,
          textView16, textView22, textView23);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
